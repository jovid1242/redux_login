{"version":3,"sources":["auth/login.js","pages/home.js","pages/profile.js","App.js","auth/userSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Login","useState","login","password","user","setUser","disable","setDisable","users","useSelector","state","auth","history","useHistory","useEffect","className","type","name","placeholder","onChange","e","target","value","onClick","preventDefault","push","send","home","props","Profile","App","path","exact","userSlice","createSlice","initialState","id","reducers","store","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAKO,SAASA,IAAS,IAAD,EACEC,mBAAS,CAC/BC,MAAO,KACPC,SAAU,OAHU,mBACfC,EADe,KACTC,EADS,OAKQJ,oBAAS,GALjB,mBAKfK,EALe,KAKNC,EALM,KAMhBC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,SAC1CI,EAAUC,cAChBC,qBAAU,WACR,OAAIV,EAAKF,QAAUM,EAAM,GAAGN,OAGxBE,EAAKD,WAAaK,EAAM,GAAGL,SAFtBI,GAAW,GAKbA,GAAW,KACjB,CAACH,IAOJ,OACE,8BACE,qBAAKW,UAAU,QAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,aAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,YAAf,SACE,2CAGJ,qBAAKA,UAAU,mBAAf,SACE,iCACE,uBACEC,KAAK,OACLC,KAAK,QACLC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOf,EAAQ,2BAAKD,GAAN,IAAYF,MAAOkB,EAAEC,OAAOC,YAEtD,uBACEN,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,SAAU,SAACC,GAAD,OACRf,EAAQ,2BAAKD,GAAN,IAAYD,SAAUiB,EAAEC,OAAOC,YAG1C,mBACEP,WAAuB,IAAZT,EAAmB,aAAe,GAC7CiB,QAAS,SAACH,GAAD,OAjCZ,SAACA,GACZA,EAAEI,iBACFZ,EAAQa,KAAK,YA+BiBC,CAAKN,IAFvB,kFC3CDO,MARf,SAAcC,GACZ,OACE,8BACE,cAAC5B,EAAD,O,MCYS6B,MAbf,WACE,IAAMrB,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,SAChD,OACE,8BACE,qBAAKO,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uEAAYP,EAAM,GAAGN,gBCWhB4B,MAjBf,WACE,OACE,mCACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,WAAWC,OAAK,EAA5B,SACE,cAAC,EAAD,c,QCMGC,EARUC,YAAY,CACnCjB,KAAM,OACNkB,aAZmB,CACnB3B,MAAO,CACL,CACE4B,GAAI,EACJlC,MAAO,cACPC,SAAU,YAQdkC,SAAU,KAKZ,QCjBaC,EAAQC,YAAe,CAClCC,QAAS,CACP7B,KAAM8B,KCOUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.a6af4434.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../styles/login.css\";\n\nexport function Login() {\n  const [user, setUser] = useState({\n    login: null,\n    password: null,\n  });\n  const [disable, setDisable] = useState(true);\n  const users = useSelector((state) => state.auth.users);\n  const history = useHistory();\n  useEffect(() => {\n    if (user.login === users[0].login) {\n      return setDisable(false);\n    }\n    if (user.password === users[0].password) {\n      return setDisable(false);\n    }\n    return setDisable(true);\n  }, [user]);\n\n  const send = (e) => {\n    e.preventDefault();\n    history.push(\"/profile\");\n  };\n\n  return (\n    <div>\n      <div className=\"login\">\n        <div className=\"login_wrapper\">\n          <div className=\"form_login\">\n            <div className=\"form_head\">\n              <div className=\"head_text\">\n                <h4>Login</h4>\n              </div>\n            </div>\n            <div className=\"form_login_group\">\n              <form>\n                <input\n                  type=\"text\"\n                  name=\"login\"\n                  placeholder=\"user Name\"\n                  onChange={(e) => setUser({ ...user, login: e.target.value })}\n                />\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"password\"\n                  onChange={(e) =>\n                    setUser({ ...user, password: e.target.value })\n                  }\n                />\n                <a\n                  className={disable === true ? \"disableBtn\" : \"\"}\n                  onClick={(e) => send(e)}\n                >\n                  Отправить\n                </a>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\r\nimport { Login } from \"../auth/login\";\r\n\r\nfunction home(props) {\r\n  return (\r\n    <div>\r\n      <Login />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default home;\r\n","import React from \"react\";\r\nimport \"../styles/profile.css\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction Profile() {\r\n  const users = useSelector((state) => state.auth.users);\r\n  return (\r\n    <div>\r\n      <div className=\"profile\">\r\n        <div className=\"info_user\">\r\n          <h1>Привет {users[0].login}</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/home\";\nimport Profile from \"./pages/profile\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/profile\" exact>\n            <Profile />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  users: [\n    {\n      id: 1,\n      login: \"developer21\",\n      password: \"123456\",\n    },\n  ],\n};\n\nexport const userSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {},\n});\n\n// Action creators are generated for each case reducer function\n\nexport default userSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport counterReducer from \"../auth/userSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    auth: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}